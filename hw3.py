'''
Реализовать программу работы с органическими клетками, состоящими из ячеек.
Необходимо создать класс Клетка.
В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число).
В классе должны быть реализованы методы перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()),
умножение (__mul__()), деление (__floordiv__()).
Данные методы должны применяться только к клеткам и выполнять увеличение,
уменьшение, умножение и целочисленное (с округлением до целого) деление клеток, соответственно.
Сложение. Объединение двух клеток.
При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
Вычитание. Участвуют две клетки.
Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
Умножение. Создается общая клетка из двух.
Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
Деление.
Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
Данный метод позволяет организовать ячейки по рядам.
Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Т
огда метод make_order() вернет строку: *****\n*****\n**.
Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
Тогда метод make_order() вернет строку: *****\n*****\n*****.

'''


class Cell:
    def __init__(self, count_cell):
        try:
            if count_cell <= 0:
                raise ValueError
            else:
                self.count_cell = count_cell
        except ValueError:
            print(f'Ошибка, введённое число: "{count_cell}" - некорректно! Число должно быть строго положительное!')

    def __add__(self, other):
        return f'Две клетки объединились и получилась клетка размером: {self.count_cell + other.count_cell}.'

    def __sub__(self, other):
        try:
            if self.count_cell - other.count_cell <= 0:
                raise ValueError
            else:
                return f'Две клетки врезались друг в друга, в живых осталось клетка размером:' \
                       f' {abs(self.count_cell - other.count_cell)}.'
        except ValueError:
            return f'Полная аннигиляция клеток!! Выживших нет :('

    def __mul__(self, other):
        return f'Две клетки спарились и умножили свой размер до {self.count_cell * other.count_cell} клеток.'

    def __floordiv__(self, other):
        try:
            if self.count_cell - other.count_cell <= 0:
                raise ValueError
            else:
                return f'Случилась некая аказия и получилась клетка размером: {self.count_cell // other.count_cell}.'
        except ValueError:
            return f'Полная аннигиляция клеток!! Выживших нет :('

    def make_order(self, mash_count):
        result_list = ''
        for i in range(self.count_cell // mash_count):
            result_list += f'{"@" * mash_count}\n'
        result_list += f"{('@' * (self.count_cell % mash_count))}\n"
        return result_list


cell_1 = Cell(100)
cell_2 = Cell(50)
print(cell_1 + cell_2)

print(cell_2.make_order(9))
